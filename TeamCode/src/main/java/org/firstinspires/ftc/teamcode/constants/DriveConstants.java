package org.firstinspires.ftc.teamcode.constants;

import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.hardware.PIDFCoefficients;

/*
 * Constants shared between multiple drive types.
 *
 * Constants generated by LearnRoadRunner.com/drive-constants
 *
 * TODO: Tune or adjust the following constants to fit your robot. Note that the non-final
 * fields may also be edited through the dashboard (connect to the robot's WiFi network and
 * navigate to https://192.168.49.1:8080/dash). Make sure to save the values here after you
 * adjust them in the dashboard; **config variable changes don't persist between app restarts**.
 *
 * These are not the only parameters; some are located in the localizer classes, drive base classes,
 * and op modes themselves.
 */
@Config
public class DriveConstants {

    /*
     * These are motor constants that should be listed online for your motors.
     */
   // public static final double TICKS_PER_REV = 384.5; // Blackfrog_setting. Refer to "Encoder Resolution" on https://www.gobilda.com/5203-series-yellow-jacket-planetary-gear-motor-19-2-1-ratio-24mm-length-8mm-rex-shaft-312-rpm-3-3-5v-encoder/?srsltid=AfmBOorWZpTWt_wZt0bQT4wGwKpbHIqO7SIIoiSli7rzeBqmQN5UDTkx
    public static final double MAX_RPM = 435;

    /**
     * The name of the leftFront Mecanum drive motor configured in Driver Station
     */
    public static final String leftFrontMotorName            = "lfrtch0";

    /**
     * The name of the leftBack Mecanum drive motor configured in Driver Station
     */
    public static final String leftBackMotorName             = "lrrech1";

    /**
     * The name of the rightFront Mecanum drive motor configured in Driver Station
     */
    public static final String rightFrontMotorName           = "rftch2";

    /**
     * The name of the rightBack Mecanum drive motor configured in Driver Station
     */
    public static final String rightBackMotorName            = "rrrch3";

    private static final double COMPENSATION = 19.5; // For GoBILDA 5202 motors 19.5

    // Calculate the COUNTS_PER_INCH for your specific drive train.
    // Go to your motor vendor website to determine your motor's COUNTS_PER_MOTOR_REV
    // For external drive gearing, set DRIVE_GEAR_REDUCTION as needed.
    // For example, use a value of 2.0 for a 12-tooth spur gear driving a 24-tooth spur gear.
    // This is gearing DOWN for less speed and more torque.
    // For gearing UP, use a gear ratio less than 1.0. Note this will affect the direction of wheel rotation.
    static final double     TICKS_PER_REV = 384.5 ;    // eg: goBilda Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // No External Gearing.
    static final double     WHEEL_DIAMETER_INCHES   = 4.09448;     // For figuring circumference
    public static final double     COUNTS_PER_INCH         = ((TICKS_PER_REV - COMPENSATION) * DRIVE_GEAR_REDUCTION) /
                                                      (WHEEL_DIAMETER_INCHES * 3.1415);
    /**
     * Set USE_MOTOR_ENCODER to true to enable built-in hub velocity control using drive encoders.
     * Set this flag to false if drive encoders are not present and an alternative localization
     * method is in use (e.g., tracking wheels / TwoDeadWheel odomometry).
     * If using the built-in motor velocity PID, update MOTOR_VELO_PID with the tuned coefficients
     * from DriveVelocityPIDTuner.
     **/

    public static boolean USE_MOTOR_ENCODER = false; //false if using deadwheel odometry.
    // https://www.ctrlaltftc.com/practical-examples/ftc-motor-control
    // RUN WITHOUT ENCODERS does NOT disable the encoder from doing things such as position or
    // velocity measurement but instead lets us just assign raw motor power to our motor.
    // The alternative mode, RUN USING ENCODERS simply runs the motor at a speed proportional to
    // its maximum speed, for example setting the power at 0.5 would run the motor at exactly 50%
    // of its speed. While this may sound great at first, this internal velocity control runs at
    // a slower frequency and will often have less desirable results than using our own custom,
    // external controller. For this external controller to work properly we should be using RUN WITHOUT ENCODER.

    public static boolean USE_DEAD_WHEEL_ODOMETRY = true; //Blackfrog_setting
    public static boolean USE_TWO_DEAD_WHEEL_ODOMETRY = false; //Blackfrog_setting
    public static boolean USE_THREE_DEAD_WHEEL_ODOMETRY = false; //Blackfrog_setting
    public static boolean USE_goBILDA_4_BAR_POD = true; //Blackfrog_setting

    /*
     * Set RUN_USING_ENCODER to true to enable built-in hub velocity control using drive encoders.
     * Set this flag to false if drive encoders are not present and an alternative localization
     * method is in use (e.g., tracking wheels).
     *
     * If using the built-in motor velocity PID, update MOTOR_VELO_PID with the tuned coefficients
     * from DriveVelocityPIDTuner.
     */

    public static double DRIVE_P = 0;
    public static double DRIVE_I = 0;
    public static double DRIVE_D = 0;
    public static double DRIVE_F = getMotorVelocityF(MAX_RPM / 60 * TICKS_PER_REV);

    public static PIDFCoefficients MOTOR_VELO_PID = new PIDFCoefficients(DRIVE_P, DRIVE_I, DRIVE_D, DRIVE_F);

    /*
     * These are physical constants that can be determined from your robot (including the track
     * width; it will be tune empirically later although a rough estimate is important). Users are
     * free to chose whichever linear distance unit they would like so long as it is consistently
     * used. The default values were selected with inches in mind. Road runner uses radians for
     * angular distances although most angular parameters are wrapped in Math.toRadians() for
     * convenience. Make sure to exclude any gear ratio included in MOTOR_CONFIG from GEAR_RATIO.
     */
    public static double WHEEL_RADIUS = 2.04724; // in . For 96 mm wheels its 1.88976
    public static double GEAR_RATIO = 1; // output (wheel) speed / input (motor) speed
    public static double TRACK_WIDTH = 12; // inches

    /*
     * These are the feedforward parameters used to model the drive motor behavior. If you are using
     * the built-in velocity PID, *these values are fine as is*. However, if you do not have drive
     * motor encoders or have elected not to use them for velocity control, these values should be
     * empirically tuned.
     */
    public static double kV =  1.0; //BlackFrog_Setting....
    public static double kA = 0;//BlackFrog_Setting.
    public static double kStatic = 0.0; //BlackFrog_Setting.

    /*
     * These values are used to generate the trajectories for you robot. To ensure proper operation,
     * the constraints should never exceed ~80% of the robot's actual capabilities. While Road
     * Runner is designed to enable faster autonomous motion, it is a good idea for testing to start
     * small and gradually increase them later after everything is working. All distance units are
     * inches.
     */
    /*
     * Note from LearnRoadRunner.com:
     * The velocity and acceleration constraints were calculated based on the following equation:
     * ((MAX_RPM / 60) * GEAR_RATIO * WHEEL_RADIUS * 2 * Math.PI) * 0.85
     * Resulting in 52.48291908330528 in/s.
     * This is only 85% of the theoretical maximum velocity of the bot, following the recommendation above.
     * This is capped at 85% because there are a number of variables that will prevent your bot from actually
     * reaching this maximum velocity: voltage dropping over the game, bot weight, general mechanical inefficiencies, etc.
     * However, you can push this higher yourself if you'd like. Perhaps raise it to 90-95% of the theoretically
     * max velocity. The theoretically maximum velocity is 61.74461068624151 in/s.
     * Just make sure that your bot can actually reach this maximum velocity. Path following will be detrimentally
     * affected if it is aiming for a velocity not actually possible.
     *
     * The maximum acceleration is somewhat arbitrary and it is recommended that you tweak this yourself based on
     * actual testing. Just set it at a reasonable value and keep increasing until your path following starts
     * to degrade. As of now, it simply mirrors the velocity, resulting in 52.48291908330528 in/s/s
     *
     * Maximum Angular Velocity is calculated as: maximum velocity / trackWidth * (180 / Math.PI) but capped at 360Â°/s.
     * You are free to raise this on your own if you would like. It is best determined through experimentation.

     */
    public static double MAX_VEL = 52.48180821614297;
    public static double MAX_ACCEL = 52.48180821614297;
    public static double MAX_ANG_VEL = Math.toRadians(184.02607784577722);
    public static double MAX_ANG_ACCEL = Math.toRadians(184.02607784577722);


    public static double encoderTicksToInches(double ticks) {
        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;
    }

    public static double rpmToVelocity(double rpm) {
        return rpm * GEAR_RATIO * 2 * Math.PI * WHEEL_RADIUS / 60.0;
    }

    public static double getMotorVelocityF(double ticksPerSecond) {
        // see https://docs.google.com/document/d/1tyWrXDfMidwYyP_5H4mZyVgaEswhOC35gvdmP-V-5hA/edit#heading=h.61g9ixenznbx
        return 32767 / ticksPerSecond;
    }
}

